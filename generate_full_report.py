#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
generate_full_report.py

Function:
  - Prompt user (in English) to input Specimen Details (Lab Number, Specimen Type, Collection Date, Nanopore Run, Barcode, Clinical Results).
  - Prompt user (in English) to input Sequencing Results (Minimum QC Score, Total Data, Total Reads, Total Microbial Reads).
  - Read sliding tables HTML generated by generate_sliding_tables.py (tables_output.html).
  - Render full report template (full_report_template.html), output final_blood_report.html.
  - Automatically insert current date and time into the footer.

Usage example:
  python3 generate_full_report.py \
      --tables tables_output.html \
      --template full_report_template.html \
      --output final_blood_report.html
"""

import argparse
import os
from datetime import datetime
from jinja2 import Template


def parse_args():
    parser = argparse.ArgumentParser(
        description="Generate full Clinical Microbial mNGS Report by inserting sliding tables"
    )
    parser.add_argument(
        "--tables", "-t", required=True,
        help="Path to the sliding tables HTML file (tables_output.html)"
    )
    parser.add_argument(
        "--template", "-p", required=True,
        help="Path to the full report template (full_report_template.html)"
    )
    parser.add_argument(
        "--output", "-o", required=True,
        help="Path to the final output HTML (e.g. final_blood_report.html)"
    )
    return parser.parse_args()


def main():
    args = parse_args()

    # 1. Prompt user for Specimen Details (in English)
    print("---- Please enter Specimen Details ----")
    lab_number = input("Lab Number: ").strip()
    specimen_type = input("Specimen Type: ").strip()
    collection_date = input("Specimen Collection Date (YYYY-MM-DD): ").strip()
    nanopore_run = input("Nanopore Run: ").strip()
    barcode = input("Barcode: ").strip()
    clinical_results = input("Clinical Results (comma-separated): ").strip()

    # 2. Prompt user for Sequencing Results (in English)
    print("\n---- Please enter Sequencing Results ----")
    min_qscore = input("Minimum QC Score: ").strip()
    total_data = input("Total Data (e.g. 5.69 Gb): ").strip()
    total_reads = input("Total Reads (e.g. 2.65 M): ").strip()
    total_microbial_reads = input("Total Microbial Reads (count or percentage): ").strip()

    # 3. Read sliding tables HTML fragment
    if not os.path.exists(args.tables):
        print(f"ERROR: Cannot find sliding tables file: {args.tables}")
        return
    with open(args.tables, "r", encoding="utf-8") as fp:
        sliding_tables_html = fp.read()

    # 4. Read full report template
    if not os.path.exists(args.template):
        print(f"ERROR: Cannot find report template: {args.template}")
        return
    with open(args.template, "r", encoding="utf-8") as fp:
        tpl = Template(fp.read())

    # 5. Generate current date-time string, e.g. "2025-06-04 14:23"
    now = datetime.now().strftime("%Y-%m-%d %H:%M")

    # 6. Render the full report
    rendered = tpl.render(
        lab_number=lab_number,
        specimen_type=specimen_type,
        collection_date=collection_date,
        nanopore_run=nanopore_run,
        barcode=barcode,
        clinical_results=clinical_results,
        min_qscore=min_qscore,
        total_data=total_data,
        total_reads=total_reads,
        total_microbial_reads=total_microbial_reads,
        sliding_tables=sliding_tables_html,
        report_datetime=now
    )

    # 7. Write out the final report
    with open(args.output, "w", encoding="utf-8") as fp:
        fp.write(rendered)

    print(f"âœ” Full clinical report generated: {args.output}")


if __name__ == "__main__":
    main()
